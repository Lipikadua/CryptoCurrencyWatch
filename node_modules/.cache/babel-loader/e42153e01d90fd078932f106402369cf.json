{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\React\\\\cryptocurrencyUpdate\\\\src\\\\hoc\\\\withCurrencyConvert.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { getCurrencyCode } from \"currency-symbol-format\";\nconst BASE_URL = \"https://api.exchangeratesapi.io/latest\";\n\nconst withCurrencyConvert = WComponent => {\n  var _s = $RefreshSig$();\n\n  const WithCurrencyConvert = props => {\n    _s();\n\n    const {\n      setCurrencyName,\n      setCurrencySymbol,\n      setExchangeRate\n    } = props;\n    const [currencyOptions, setCurrencyOptions] = useState([]);\n    useEffect(() => {\n      fetch(BASE_URL).then(res => res.json()).then(data => {\n        const firstCurrency = Object.keys(data.rates)[26];\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\n        setExchangeRate(data.rates[firstCurrency]);\n      });\n    }, [setCurrencyOptions, setExchangeRate]); //  console.log('fromUseEffect1',exchangeRate);\n    //  console.log('fromUseEffect1',props.currencyName);\n    // console.log('fromUseEffect2',currentName);\n\n    useEffect(() => {\n      if (props.currencyName != null & props.currencyName != \"USD\") {\n        fetch(`${BASE_URL}?base=${\"USD\"}&symbols=${props.currencyName}`).then(res => res.json()).then(data => setExchangeRate(data.rates[props.currencyName]));\n      }\n    }, [props.currencyName, props.exchangeRate, setExchangeRate]);\n    console.log(\"fromUseEffect2\", props.exchangeRate);\n    console.log(\"fromUseEffect2\", props.currencyName);\n\n    const handleSelect = e => {\n      setCurrencyName(e);\n      setCurrencySymbol(getCurrencyCode(e));\n    };\n\n    return /*#__PURE__*/_jsxDEV(WComponent, {\n      currencyOptions: currencyOptions,\n      onSelect: handleSelect,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(WithCurrencyConvert, \"P6EHG9ZqKmxGWeYXiRAyxnZy8SY=\");\n\n  return WithCurrencyConvert;\n};\n\nexport default withCurrencyConvert;","map":{"version":3,"sources":["D:/React/cryptocurrencyUpdate/src/hoc/withCurrencyConvert.js"],"names":["React","useEffect","useState","getCurrencyCode","BASE_URL","withCurrencyConvert","WComponent","WithCurrencyConvert","props","setCurrencyName","setCurrencySymbol","setExchangeRate","currencyOptions","setCurrencyOptions","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","currencyName","exchangeRate","console","log","handleSelect","e"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,eAAT,QAAgC,wBAAhC;AAEA,MAAMC,QAAQ,GAAG,wCAAjB;;AACA,MAAMC,mBAAmB,GAAIC,UAAD,IAAgB;AAAA;;AAC1C,QAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AACrC,UAAM;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA,iBAAnB;AAAsCC,MAAAA;AAAtC,QAA0DH,KAAhE;AACA,UAAM,CAACI,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,EAAD,CAAtD;AAEAD,IAAAA,SAAS,CAAC,MAAM;AACda,MAAAA,KAAK,CAACV,QAAD,CAAL,CACGW,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd,cAAMC,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYH,IAAI,CAACI,KAAjB,EAAwB,EAAxB,CAAtB;AACAT,QAAAA,kBAAkB,CAAC,CAACK,IAAI,CAACK,IAAN,EAAY,GAAGH,MAAM,CAACC,IAAP,CAAYH,IAAI,CAACI,KAAjB,CAAf,CAAD,CAAlB;AACAX,QAAAA,eAAe,CAACO,IAAI,CAACI,KAAL,CAAWH,aAAX,CAAD,CAAf;AACD,OANH;AAOD,KARQ,EAQN,CAACN,kBAAD,EAAqBF,eAArB,CARM,CAAT,CAJqC,CAcrC;AACA;AACA;;AAEAV,IAAAA,SAAS,CAAC,MAAM;AACd,UAAKO,KAAK,CAACgB,YAAN,IAAsB,IAAvB,GAAgChB,KAAK,CAACgB,YAAN,IAAsB,KAA1D,EAAkE;AAChEV,QAAAA,KAAK,CAAE,GAAEV,QAAS,SAAQ,KAAM,YAAWI,KAAK,CAACgB,YAAa,EAAzD,CAAL,CACGT,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAUP,eAAe,CAACO,IAAI,CAACI,KAAL,CAAWd,KAAK,CAACgB,YAAjB,CAAD,CAFjC;AAGD;AACF,KANQ,EAMN,CAAChB,KAAK,CAACgB,YAAP,EAAqBhB,KAAK,CAACiB,YAA3B,EAAyCd,eAAzC,CANM,CAAT;AAQAe,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BnB,KAAK,CAACiB,YAApC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BnB,KAAK,CAACgB,YAApC;;AAEA,UAAMI,YAAY,GAAIC,CAAD,IAAO;AAC1BpB,MAAAA,eAAe,CAACoB,CAAD,CAAf;AACAnB,MAAAA,iBAAiB,CAACP,eAAe,CAAC0B,CAAD,CAAhB,CAAjB;AACD,KAHD;;AAKA,wBACE,QAAC,UAAD;AACE,MAAA,eAAe,EAAEjB,eADnB;AAEE,MAAA,QAAQ,EAAEgB,YAFZ;AAAA,SAGMpB;AAHN;AAAA;AAAA;AAAA;AAAA,YADF;AAOD,GAzCD;;AAD0C,KACpCD,mBADoC;;AA2C1C,SAAOA,mBAAP;AACD,CA5CD;;AA6CA,eAAeF,mBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getCurrencyCode } from \"currency-symbol-format\";\r\n\r\nconst BASE_URL = \"https://api.exchangeratesapi.io/latest\";\r\nconst withCurrencyConvert = (WComponent) => {\r\n  const WithCurrencyConvert = (props) => {\r\n    const { setCurrencyName, setCurrencySymbol, setExchangeRate } = props;\r\n    const [currencyOptions, setCurrencyOptions] = useState([]);\r\n\r\n    useEffect(() => {\r\n      fetch(BASE_URL)\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          const firstCurrency = Object.keys(data.rates)[26];\r\n          setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\r\n          setExchangeRate(data.rates[firstCurrency]);\r\n        });\r\n    }, [setCurrencyOptions, setExchangeRate]);\r\n\r\n    //  console.log('fromUseEffect1',exchangeRate);\r\n    //  console.log('fromUseEffect1',props.currencyName);\r\n    // console.log('fromUseEffect2',currentName);\r\n\r\n    useEffect(() => {\r\n      if ((props.currencyName != null) & (props.currencyName != \"USD\")) {\r\n        fetch(`${BASE_URL}?base=${\"USD\"}&symbols=${props.currencyName}`)\r\n          .then((res) => res.json())\r\n          .then((data) => setExchangeRate(data.rates[props.currencyName]));\r\n      }\r\n    }, [props.currencyName, props.exchangeRate, setExchangeRate]);\r\n\r\n    console.log(\"fromUseEffect2\", props.exchangeRate);\r\n    console.log(\"fromUseEffect2\", props.currencyName);\r\n\r\n    const handleSelect = (e) => {\r\n      setCurrencyName(e);\r\n      setCurrencySymbol(getCurrencyCode(e));\r\n    };\r\n\r\n    return (\r\n      <WComponent\r\n        currencyOptions={currencyOptions}\r\n        onSelect={handleSelect}\r\n        {...props}\r\n      ></WComponent>\r\n    );\r\n  };\r\n  return WithCurrencyConvert;\r\n};\r\nexport default withCurrencyConvert;\r\n"]},"metadata":{},"sourceType":"module"}